#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Script para iniciar a aplica√ß√£o em modo produ√ß√£o
"""

import os
import sys
import subprocess
import json
from pathlib import Path
from dotenv import load_dotenv

def check_requirements():
    """Verifica se os requisitos est√£o atendidos"""
    print("üîç Verificando requisitos...")
    
    # Verificar Python
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8+ √© necess√°rio")
        return False
    
    # Verificar Docker
    try:
        subprocess.run(['docker', '--version'], check=True, capture_output=True)
        print("‚úÖ Docker encontrado")
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ùå Docker n√£o encontrado. Instale o Docker primeiro.")
        return False
    
    # Verificar Docker Compose
    try:
        subprocess.run(['docker-compose', '--version'], check=True, capture_output=True)
        print("‚úÖ Docker Compose encontrado")
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ùå Docker Compose n√£o encontrado. Instale o Docker Compose primeiro.")
        return False
    
    return True

def check_environment():
    """Verifica configura√ß√µes de ambiente"""
    print("üîß Verificando configura√ß√µes de ambiente...")
    
    env_file = Path('.env')
    if not env_file.exists():
        print("‚ö†Ô∏è  Arquivo .env n√£o encontrado. Criando a partir do exemplo...")
        example_file = Path('.env.example')
        if example_file.exists():
            import shutil
            shutil.copy(example_file, env_file)
            print("üìã Arquivo .env criado. EDITE-O ANTES DE CONTINUAR!")
            print("üîë Especialmente: SECRET_KEY, MONGODB_URI")
            return False
        else:
            print("‚ùå Arquivo .env.example n√£o encontrado")
            return False
    
    # Carregar vari√°veis de ambiente
    load_dotenv()
    
    # Verificar vari√°veis cr√≠ticas
    critical_vars = ['SECRET_KEY', 'FLASK_ENV']
    missing_vars = []
    
    for var in critical_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        print(f"‚ùå Vari√°veis de ambiente obrigat√≥rias n√£o definidas: {', '.join(missing_vars)}")
        return False
    
    # Verificar se √© chave padr√£o
    if os.getenv('SECRET_KEY') in ['your-secret-key-here-change-in-production', 'dev-key-change-in-production']:
        print("‚ö†Ô∏è  AVISO: Voc√™ est√° usando uma SECRET_KEY padr√£o!")
        print("üîê Gere uma chave segura com: python -c \"import secrets; print(secrets.token_hex(32))\"")
        return False
    
    print("‚úÖ Configura√ß√µes de ambiente OK")
    return True

def prepare_directories():
    """Prepara diret√≥rios necess√°rios"""
    print("üìÅ Preparando diret√≥rios...")
    
    dirs = ['uploads', 'logs', 'ssl']
    for dir_name in dirs:
        Path(dir_name).mkdir(exist_ok=True)
        print(f"‚úÖ Diret√≥rio {dir_name} pronto")

def check_mongodb_connection():
    """Verifica conex√£o com MongoDB"""
    print("üóÑÔ∏è  Testando conex√£o com MongoDB...")
    
    mongodb_uri = os.getenv('MONGODB_URI')
    if not mongodb_uri:
        print("‚ö†Ô∏è  MONGODB_URI n√£o definido. Funcionalidades limitadas.")
        return True
    
    try:
        from pymongo import MongoClient
        from urllib.parse import urlparse
        
        # Testar conex√£o
        client = MongoClient(mongodb_uri, serverSelectionTimeoutMS=5000)
        client.server_info()
        client.close()
        print("‚úÖ Conex√£o com MongoDB OK")
        return True
        
    except Exception as e:
        print(f"‚ö†Ô∏è  Erro ao conectar com MongoDB: {e}")
        print("üîÑ A aplica√ß√£o funcionar√° com armazenamento local apenas")
        return True

def build_and_start():
    """Constr√≥i e inicia os containers"""
    print("üê≥ Construindo e iniciando containers...")
    
    try:
        # Build
        print("üî® Construindo imagens...")
        subprocess.run(['docker-compose', 'build'], check=True)
        
        # Start
        print("üöÄ Iniciando servi√ßos...")
        subprocess.run(['docker-compose', 'up', '-d'], check=True)
        
        # Verificar status
        print("üìä Verificando status dos containers...")
        result = subprocess.run(['docker-compose', 'ps'], capture_output=True, text=True)
        print(result.stdout)
        
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao iniciar containers: {e}")
        return False

def show_status():
    """Mostra status da aplica√ß√£o"""
    print("\n" + "="*60)
    print("üéâ APLICA√á√ÉO INICIADA COM SUCESSO!")
    print("="*60)
    
    # Obter IP p√∫blico (se poss√≠vel)
    try:
        import requests
        public_ip = requests.get('http://checkip.amazonaws.com', timeout=5).text.strip()
        print(f"üåê Acesso externo: http://{public_ip}")
    except:
        print("üåê Acesso externo: http://SEU-IP-PUBLICO")
    
    print("üè† Acesso local: http://localhost")
    print("üë§ Login padr√£o: admin / admin123")
    print("üîë ALTERE A SENHA PADR√ÉO IMEDIATAMENTE!")
    
    print("\nüìã Comandos √∫teis:")
    print("  docker-compose logs -f    # Ver logs em tempo real")
    print("  docker-compose ps         # Status dos containers")
    print("  docker-compose down       # Parar aplica√ß√£o")
    print("  docker-compose restart    # Reiniciar aplica√ß√£o")
    
    print("\nüîß Arquivos importantes:")
    print("  .env                      # Configura√ß√µes de ambiente")
    print("  users.json                # Banco de dados de usu√°rios")
    print("  uploads/                  # Arquivos enviados")
    print("  logs/                     # Logs da aplica√ß√£o")
    
    print("="*60)

def main():
    """Fun√ß√£o principal"""
    print("üöÄ INICIANDO ANALISADOR DE PDFs - PRODU√á√ÉO")
    print("="*60)
    
    # Verificar requisitos
    if not check_requirements():
        print("‚ùå Requisitos n√£o atendidos. Abortando.")
        sys.exit(1)
    
    # Verificar ambiente
    if not check_environment():
        print("‚ùå Configura√ß√£o de ambiente incompleta. Configure o arquivo .env primeiro.")
        sys.exit(1)
    
    # Preparar diret√≥rios
    prepare_directories()
    
    # Verificar MongoDB
    check_mongodb_connection()
    
    # Construir e iniciar
    if not build_and_start():
        print("‚ùå Falha ao iniciar aplica√ß√£o.")
        sys.exit(1)
    
    # Mostrar status
    show_status()

if __name__ == '__main__':
    main()